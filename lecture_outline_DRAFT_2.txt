This document represents the second draft of my lecture outline.

Lecture Goals:
1. Introduce the basics of quantum computing
2. Introduce new and relevant complexity classes and the relationships between them
================================================================

1. Deterministic Classical Computing Recap
	- Given an input, you can determine what the output will be
	- Algorithms have complexities often based on the input size
	- Bring up P and NP and the associated complexity diagram (P is a subset of NP)
	- Introduce the PSPACE complexity class and edit the complexity diagram
	- Transition: quantum computing does not use a deterministic approach

2. Introduce Probabilistic Classical Computing
	- Introduce the BPP complexity class and edit the complexity diagram
		* From the Sipser-Lautemann theorem, it follows that if P = NP, then P = BPP
		* All problems in P are obviously also in BPP. However, many problems have been known to be in BPP but not known to be in P.
		  The number of such problems is decreasing, and it is conjectured that P = BPP (Wikipedia)
		* For an example problem that is in BPP but not known to be in P, use the Polynomial Identity 
Testing problem:
		  https://en.wikipedia.org/wiki/BPP_(complexity)#:~:text=.%5B1%5D-,Problems,-%5Bedit%5D
		  Thorough explanation: https://cs.stanford.edu/~mpkim/notes/lec5.pdf
		* Thing to say: Why does BPP exist? Well, honestly, it almost doesn't. One of the first problems in the class was primality testing, but a deterministic solution to that was soon found by {people here}. Problems that belong to the class are slowly being derandomized into a deterministic equivalent, making people believe that, perhaps, BPP=P.
	- How can a probabilistic approach outperform a deterministic one?
		* Discuss the doubts and confusions you had about probabilistic algorithms
		* Discuss how to modify a probabilistic algorithm to better your odds (refer to "Important" on pg.29 in notes)

3. Introduction of Probability in Quantum Computing
	- Compare classical bits to their probabilistic counterpart
		* For the comparison, use a classic NOT gate to represent the deterministic behavior of a classical bit and use a "coin flip" gate to represent the probabilistic behavior of a quantum bit (qubit) (start using the term "measure" to refer to observing the state of the ouput)
	- Demonstrate the need for a new way to represent the state of this qubit
		* A classical bit only needs one value to represent its current state, but a qubit needs to store two values: a percentage for 0 and a percentage for 1
		* Suggest the use of a column vector to store these values (at this point, the column vector example uses whole numbers like (50% 50%) or (75% 25%)
	-  Introduce Born's Rule / Normalization Constraint for probability amplitudes
		* Through this redefinition of probability, you can introduce probability amplitudes and give an example of how it is no longer the column vector (50% 50%) but rather (1/root(2) 1/root(2))
	- Present the general form of the column vector of a qubit using alpha and beta
		* Also use the alpha/beta notation to rewrite the Normalization formula

4. Discuss the Representation of the State of Multiple Qubits
	- Start with using column vector notation and discuss how the size of the vector grows exponentially with the number of qubits.
	- Introduce Dirac (bra-ket) notation as a solution to the problem (use general form bottom of pg.17 for
	single qubit, and top of pg.23 for two qubits)
	- Cut in with an explanation as to why a qubit can store exponentially more information than a bit (refer to rabbit-hole)
	- Primarily use Dirac notation from this point forth

5. Introduce Single-Qubit Gates
	- X (NOT gate)
	- Hadamard gate
		* Have the students recall the "coin flip" gate introduced in Step 3 and say that the Hadamard gate is almost equivalent to it
		* Demonstrate the behavior of a back-to-back Hadamard and how it doesn't behave as intuition suggests (that is, like a double coin flip) (for now, blame it on the strange behavior of quantum mechanics, when really it is because all gates are reversible)
	- Construct an example circuit using these gates as a demonstration
	- Introduce the properties of a quantum circuit: depth, space (width), and total gates.

6. Introduce a Multi-Qubit Gate
	- CNOT
	- Construct an example circuit

7. Break
	- Possibly include a demonstration in the IBM Circuit Maker
	- Possibly include a brief 5-10 minute break

8. Introduce the BQP Complexity Class
	- Essentially the same as the BPP complexity class, only instead of using a classical Turing machine,
	  we use a quantum Turing machine and hence have the benefits of quantum mechanics (superposition, entanglement, etc.)
	
	Problems in BQP but not in BPP:
	- Integer Factorization: Find an integer's prime factors
		* Randomized time complexity 2^O( n^1/3 * (log n)^2/3 )
			# Mention the Number Field Sieve, which is the fastest classical algorithm to factor numbers larger than 10
		* Shor's algorithm can solve it in quantum polynomial time
		* Multiplying two prime numbers is a key part of RSA encryption, so being able to factor a number into two primes is the first step to decrypt a message
		* https://complexityzoo.net/Complexity_Garden#integer_factorization


Quantum-Complex Content for the End:
====================================
A. More About the "Quantum" in Quantum Computing
	- Classical Mechanics
		* Everything that you know and love
		* Isaac Newton (17th century)
		* Describes the motion of macroscopic objects
	- Relativity
		* Einstein's Theory of Relativity in 1905 and 1915
		* Describes objects moving close to the speed of light
		* Classical mechanics cannot explain objects moving this fast
		* Transition: which brings us to the quantum world...
	- Quantum Mechanics
		* Created in the 1920s by Erwin Schrodinger, Paul Dirac, and others
		* Describes objects at an atomic/subatomic scale
		* Cannot be explained by classical mechanics
		* Quantum computing harnesses the power of quantum mechanics
	- Perhaps use the experiment on pg.12 as a way to convice the class of the need for different rulesets

B. Superposition
	- Give a very basic definition of superposition and reveal that, in using the Hadamard gate, the students have been working with superposition all along
	- Describe the famous Schrodinger's Cat thought experiment
	- Mention that this is the reason why a qubit can store exponentially more info than a qubit

C. Entanglement
	- Generate the Bell states with Hadamard & CNOTC

D. Heisenburg Uncertainty Principle

E. Measurement
